name: Combine Markdown to TXT

on:
  schedule:
    - cron: '0 1 * * *'  # Runs daily at 01:00 UTC
  workflow_dispatch:      # Allows manual triggers from the Actions tab

jobs:
  combine-markdown:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Combine .md files into multiple TXT files
        run: |
          # Initialize variables
          counter=0
          file_index=1
          output_file="BusinessCentralDocumentation_${file_index}.txt"
          max_files=6

          # Remove old files (if any)
          rm -f BusinessCentralDocumentation_*.txt

          # Define the specific directories to include
          directories=(
            "business-central"
            "business-central/LocalFunctionality/Germany"
            "business-central/LocalFunctionality/Belgium"
            "business-central/LocalFunctionality/Netherlands"
          )

          # Function to replace all [!INCLUDE] references
          replace_includes() {
            local file_content="$1"
            local base_dir="$2"
            echo "$file_content" | sed -E "s~\[!INCLUDE\[([^\]]+)\]\(([^)]+)\)\]~\$(cat \"$base_dir/\2\")~g"
          }

          # Loop over each .md file in the specified directories (no subfolders)
          for folder in "${directories[@]}"
          do
            find "$folder" -maxdepth 1 -type f -name "*.md" \
              -not -name "TOC.md" \
              -not -name "Reservation-Entry-table-features-that-update-the-table.md" | while read -r f
            do
              # Increment counter
              counter=$((counter + 1))

              # Create a new file after every 200 articles
              if [ $((counter % 200)) -eq 1 ] && [ $counter -ne 1 ]; then
                file_index=$((file_index + 1))

                # Check if the maximum file limit has been reached
                if [ $file_index -gt $max_files ]; then
                  echo "Error: Maximum of $max_files files allowed. Exiting with error."
                  exit 1
                fi

                output_file="BusinessCentralDocumentation_${file_index}.txt"
              fi

              # Get the filename (no .md extension)
              filename="${f%.md}"

              # Start each article with a link to Microsoft Learn
              echo "Link to Microsoft Learn Page: https://learn.microsoft.com/dynamics365/$filename" >> "$output_file"

              # Read the file content and replace [!INCLUDE] references
              file_content=$(cat "$f")
              replaced_content=$(replace_includes "$file_content" ".")

              # Append the processed content to the output file
              echo "$replaced_content" >> "$output_file"

              # End of article
              echo "end of article" >> "$output_file"

              # Optional blank line for readability
              echo >> "$output_file"
            done
          done

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Add changes and commit
          git add BusinessCentralDocumentation_*.txt
          if git commit -m "Combine markdown files into multiple TXT files"; then
            # Push changes only if a commit was made
            git push
          else
            # Exit gracefully if no changes were found
            echo "No changes to commit. Exiting gracefully."
